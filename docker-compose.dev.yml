services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: app
    ports:
      - "15432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    ports:
      - "63790:6379"

  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
      target: dev
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://app:app@postgres:5432/app?schema=public
      CORS_ORIGIN: http://localhost:3000
      JWT_ACCESS_SECRET: dev-access
      JWT_REFRESH_SECRET: dev-refresh
      JWT_ACCESS_TTL: 15m
      JWT_REFRESH_TTL: 7d
    volumes:
      - ./apps/api:/app/apps/api
      - api_node_modules:/app/apps/api/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    command: >
      sh -c "
        cd /app/apps/api &&
        yarn prisma generate &&
        yarn start:dev
      "
    ports:
      - "3001:3001"
      - "5555:5555"

  migrate:
    image: nazarify-api:latest
    working_dir: /app/apps/api
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://app:app@postgres:5432/app?schema=public
    command: >
      sh -c "
        yarn prisma generate &&
        yarn prisma migrate deploy
      "
    restart: "no"

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
      target: dev
    environment:
      NODE_ENV: development
      PORT: 3000
      NEXT_PUBLIC_API_URL: http://localhost:3001
    volumes:
      - ./apps/web:/app/apps/web
      - web_node_modules:/app/apps/web/node_modules
    depends_on:
      - api
    ports:
      - "3000:3000"

volumes:
  db_data:
  api_node_modules:
  web_node_modules:
